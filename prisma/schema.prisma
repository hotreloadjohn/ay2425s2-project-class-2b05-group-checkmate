generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Task {
  id       Int              @id @default(autoincrement())
  name     String
  statusId Int
  status   Status           @relation(fields: [statusId], references: [id])
  persons  TaskAssignment[]
}

model Status {
  id    Int    @id @default(autoincrement())
  text  String @unique
  tasks Task[]
}

model Person {
  id     Int              @id @default(autoincrement())
  email  String           @unique
  name   String
  avatar String?
  tasks  TaskAssignment[]
}

model TaskAssignment {
  taskId     Int
  personId   Int
  assignedAt DateTime @default(now())
  person     Person   @relation(fields: [personId], references: [id], onDelete: Cascade)
  task       Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@id([taskId, personId], name: "assignmentId")
}

model Company {
  id          Int       @id @default(autoincrement())
  symbol      String    @unique
  name        String
  founded     Int
  employees   Int
  address     String
  city        String
  country     String
  zipCode     String
  phone       String
  website     String
  description String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
  stocks      Stock[]

  @@index([symbol])
}

model Stock {
  stock_id      Int             @id @default(autoincrement())
  symbol        String          @unique @db.VarChar(10)
  sector        String?         @db.VarChar(100)
  company_id    Int?
  change        Int?
  favoriteStock FavoriteStock[]
  hist_prices   HistPrice[]
  limitOrder    LimitOrder[]
  company       Company?        @relation(fields: [company_id], references: [id])
  trading       Trade[]

  @@index([symbol])
}

model FavoriteStock {
  id      Int   @id @default(autoincrement())
  userId  Int
  stockId Int
  stock   Stock @relation(fields: [stockId], references: [stock_id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, stockId])
}

model HistPrice {
  price_id    Int      @id @default(autoincrement())
  stock_id    Int
  date        DateTime
  open_price  Decimal? @db.Decimal(10, 2)
  high_price  Decimal? @db.Decimal(10, 2)
  low_price   Decimal? @db.Decimal(10, 2)
  close_price Decimal  @db.Decimal(10, 2)
  volume      BigInt?
  stock       Stock    @relation(fields: [stock_id], references: [stock_id])

  @@unique([stock_id, date])
}

model LimitOrder {
  id         Int      @id @default(autoincrement())
  userId     Int
  stockId    Int
  quantity   Int
  limitPrice Decimal  @db.Decimal(10, 2)
  orderType  String
  status     String   @default("PENDING")
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  stock      Stock    @relation(fields: [stockId], references: [stock_id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Trade {
  id          Int      @id @default(autoincrement())
  userId      Int?
  stockId     Int
  quantity    Int
  price       Decimal  @db.Decimal(10, 2)
  totalAmount Decimal  @db.Decimal(10, 2)
  tradeType   String
  tradeDate   DateTime @default(now())
  stock       Stock    @relation(fields: [stockId], references: [stock_id])
  user        User?    @relation(fields: [userId], references: [id])
}

model News {
  news_id   Int      @id @default(autoincrement())
  image_url String
  title     String   @db.VarChar(255)
  caption   String   @db.VarChar(255)
  content   String
  category  String   @db.VarChar(100)
  tags      String[]
}

model User {
  id               Int             @id @default(autoincrement())
  email            String          @unique
  password         String
  wallet           Int             @default(100000)
  createdAt        DateTime        @default(now())
  referredById     Int?
  status           String          @default("Sufficient Money")
  userReferralLink String?         @unique
  username         String          @unique
  updatedAt        DateTime        @updatedAt
  name             String?
  phoneNumber      Int?
  BlogComment      BlogComment[]
  BlogPost         BlogPost[]
  Comment          Comment[]
  FavoriteApi      FavoriteApi[]
  favoriteStocks   FavoriteStock[]
  Goal             Goal[]
  limitOrders      LimitOrder[]
  RedeemBy         RedeemBy[]
  referrals        Referral[]      @relation("UserReferrals")
  referralUsages   ReferralUsage[]
  trading          Trade[]
  referredBy       Referral?       @relation("UserReferredBy", fields: [referredById], references: [id], onDelete: Cascade)
}

model Referral {
  id                  Int             @id @default(autoincrement())
  referralLink        String          @unique
  referralSignups     Int             @default(0)
  successfulReferrals Int             @default(0)
  rewardsExchanged    Int             @default(0)
  creditsEarned       Int             @default(0)
  userId              Int?
  wallet              Int             @default(100000)
  user                User?           @relation("UserReferrals", fields: [userId], references: [id], onDelete: Cascade)
  referralUsages      ReferralUsage[]
  referredUsers       User[]          @relation("UserReferredBy")
}

model ReferralUsage {
  id         Int       @id @default(autoincrement())
  userId     Int?
  referralId Int?
  createdAt  DateTime  @default(now())
  referral   Referral? @relation(fields: [referralId], references: [id], onDelete: Cascade)
  user       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, referralId])
}

model BlogComment {
  id         Int      @id @default(autoincrement())
  post_id    Int
  user_id    Int
  comment    String
  created_at DateTime @default(now())
  BlogPost   BlogPost @relation(fields: [post_id], references: [id], onDelete: Cascade)
  User       User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model BlogPost {
  id          Int           @id @default(autoincrement())
  user_id     Int
  title       String
  content     String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @default(now())
  BlogComment BlogComment[]
  User        User          @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model Comment {
  id          Int      @id @default(autoincrement())
  userId      Int
  stockSymbol String
  content     String
  createdAt   DateTime @default(now())
  viewCount   Int      @default(0)
  User        User     @relation(fields: [userId], references: [id])

  @@index([stockSymbol])
}

model FavoriteApi {
  id     Int    @id @default(autoincrement())
  userId Int
  symbol String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Goal {
  id          Int      @id @default(autoincrement())
  title       String
  amount      Float
  deadline    DateTime
  createdAt   DateTime @default(now())
  description String?
  userId      Int
  User        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model RedeemBy {
  id          Int      @id @default(autoincrement())
  userId      Int
  dateOrdered DateTime @default(now())
  rewardId    Int
  cardCode    String
  reward      Reward   @relation(fields: [rewardId], references: [id])
  user        User     @relation(fields: [userId], references: [id])

  @@index([rewardId])
  @@index([userId])
}

model QuizQuestion {
  id             Int      @id @default(autoincrement())
  question       String
  options        String[]
  correct_answer Int
}

model Reward {
  id                Int      @id @default(autoincrement()) // Reward ID
  rewardName        String
  rewardDescription String
  cost              Int
  probability       Decimal  @db.Decimal(5,3) 

  redeemedBy        RedeemBy[] // One reward can be redeemed multiple times
}
